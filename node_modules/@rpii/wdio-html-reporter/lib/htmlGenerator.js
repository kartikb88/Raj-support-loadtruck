"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Handlebars = __importStar(require("handlebars"));
const fs = require('fs-extra');
const _ = require('lodash');
const path = require('path');
const encode = require('./encode').default;
const logger = require('@log4js-node/log4js-api');
const dayjs_1 = __importDefault(require("dayjs"));
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
dayjs_1.default.extend(duration_1.default);
class HtmlGenerator {
    static htmlOutput(reportOptions, reportData, callback = (done) => { }) {
        try {
            reportOptions.LOG.info("Html Generation started");
            let templateFile = fs.readFileSync(reportOptions.templateFilename, 'utf8');
            Handlebars.registerHelper('imageAsBase64', function (screenshotFile, screenshotPath, helperOpts) {
                // occurs when there is an error file
                if (!fs.existsSync(screenshotFile)) {
                    if (screenshotPath) {
                        screenshotFile = `${screenshotPath}/${screenshotFile}`;
                    }
                    else {
                        screenshotFile = `${screenshotFile}`;
                    }
                }
                return encode(path.resolve(screenshotFile));
            });
            Handlebars.registerHelper('isValidReport', (suites, helperOpts) => {
                if (suites && suites.length > 0) {
                    return helperOpts.fn(this);
                }
                return helperOpts.inverse(this);
            });
            Handlebars.registerHelper('isValidSuite', (suiteInfo, helperOpts) => {
                if (suiteInfo.suite.title.length > 0 &&
                    suiteInfo.suite.type === 'suite:start' &&
                    suiteInfo.suite.tests.length > 0) {
                    return helperOpts.fn(this);
                }
                return helperOpts.inverse(this);
            });
            Handlebars.registerHelper('testStateColour', (testInfo, helperOpts) => {
                if (testInfo.testStats.state === 'passed') {
                    return 'test-pass';
                }
                else if (testInfo.testStats.state === 'failed') {
                    return 'test-fail';
                }
                else if (testInfo.testStats.state === 'pending') {
                    return 'test-pending';
                }
                else if (testInfo.testStats.state === 'skipped') {
                    return 'test-skipped';
                }
            });
            Handlebars.registerHelper('testStateIcon', (testInfo, helperOpts) => {
                if (testInfo.testStats.state === 'passed') {
                    return '<span class="success">&#10004;</span>';
                }
                else if (testInfo.testStats.state === 'failed') {
                    return '<span class="error">&#10006;</span>';
                }
                else if (testInfo.testStats.state === 'pending') {
                    return '<span class="pending">&#10004;</span>';
                }
                else if (testInfo.testStats.state === 'skipped') {
                    return '<span class="skipped">&#10034;</span>';
                }
            });
            Handlebars.registerHelper('suiteStateColour', (tests, helperOpts) => {
                let numTests = Object.keys(tests).length;
                _.values(tests).find((test) => {
                    if (test.testStats.state === "pending") {
                        --numTests;
                    }
                });
                let fail = _.values(tests).find((test) => {
                    return test.testStats.state === 'failed';
                });
                if (fail != null) {
                    return 'suite-fail';
                }
                let passes = _.values(tests).filter((test) => {
                    return test.testStats.state === 'passed';
                });
                if (passes.length === numTests && numTests > 0) {
                    return 'suite-pass';
                }
                //skipped is the lowest priority check
                let skipped = _.values(tests).find((test) => {
                    return test.testStats.state === 'skipped';
                });
                if (skipped != null) {
                    return 'suite-pending';
                }
                return 'suite-unknown';
            });
            Handlebars.registerHelper('humanizeDuration', (duration, helperOpts) => {
                return dayjs_1.default.duration(duration, "milliseconds").format('HH:mm:ss.SSS');
            });
            Handlebars.registerHelper('ifSuiteHasTests', (testsHash, helperOpts) => {
                if (Object.keys(testsHash).length > 0) {
                    return helperOpts.fn(this);
                }
                return helperOpts.inverse(this);
            });
            Handlebars.registerHelper('ifEventIsError', (event, helperOpts) => {
                if (event.type.includes('Error')) {
                    return helperOpts.fn(this);
                }
                return helperOpts.inverse(this);
            });
            Handlebars.registerHelper('ifEventIsScreenshot', (event, helperOpts) => {
                if (event.type === 'screenshot') {
                    return helperOpts.fn(this);
                }
                return helperOpts.inverse(this);
            });
            Handlebars.registerHelper('ifEventIsLogMessage', (event, helperOpts) => {
                if (event.type === 'log') {
                    return helperOpts.fn(this);
                }
                return helperOpts.inverse(this);
            });
            Handlebars.registerHelper('ifCollapseTests', (text, helperOpts) => {
                return reportOptions.collapseTests;
            });
            Handlebars.registerHelper('ifCollapseSuites', (text, helperOpts) => {
                return reportOptions.collapseSuites;
            });
            Handlebars.registerHelper('logClass', (text, helperOpts) => {
                if (text.includes('Test Iteration')) {
                    return "test-iteration";
                }
                else {
                    return "log-output";
                }
            });
            if (reportOptions.templateFuncs) {
                Object.keys(reportOptions.templateFuncs).forEach((name) => {
                    //@ts-ignore
                    Handlebars.registerHelper(name, reportOptions.templateFuncs[name]);
                });
            }
            if (fs.pathExistsSync(reportOptions.outputDir)) {
                if (reportOptions.removeOutput) {
                    for (let i = 0; i < reportData.suites.length; i++) {
                        let suite = reportData.suites[i].suite;
                        for (let j = 0; j < suite.tests.length; j++) {
                            let test = suite.tests[j];
                            test.output = [];
                        }
                        let tests = suite.tests;
                        for (let k = 0; k < tests.length; k++) {
                            let test = tests[k];
                            test.output = [];
                        }
                    }
                }
                let jsonFile = reportData.reportFile.replace('.html', '.json');
                fs.outputFileSync(jsonFile, JSON.stringify(reportData));
            }
            let template = Handlebars.compile(templateFile);
            let html = template(reportData);
            if (fs.pathExistsSync(reportOptions.outputDir)) {
                fs.outputFileSync(reportData.reportFile, html);
            }
            reportOptions.LOG.info("Html Generation completed");
            callback(true);
        }
        catch (ex) {
            reportOptions.LOG.error("Html Generation processing ended in error: " + ex);
            callback(false);
        }
    }
}
exports.default = HtmlGenerator;
